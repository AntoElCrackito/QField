/***************************************************************************
 digitizinglogger.h - DigitizingLogger
  ---------------------
 begin                : 7.6.2021
 copyright            : (C) 2021 by Mathieu Pellerin
 email                : mathieu (at) opengis.ch
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef DIGITIZINGLOGGER_H
#define DIGITIZINGLOGGER_H

#include "gnsspositioninformation.h"
#include "qfieldcloudconnection.h"
#include "snappingresult.h"

#include <qgspoint.h>
#include <qgsproject.h>
#include <qgsvectorlayer.h>

#include <QObject>

class DigitizingLogger : public QObject
{
    Q_OBJECT

    Q_PROPERTY( QgsProject *project READ project WRITE setProject NOTIFY projectChanged )
    Q_PROPERTY( GnssPositionInformation positionInformation READ positionInformation WRITE setPositionInformation NOTIFY positionInformationChanged )
    Q_PROPERTY( bool positionLocked READ positionLocked WRITE setPositionLocked NOTIFY positionLockedChanged )
    Q_PROPERTY( SnappingResult topSnappingResult READ topSnappingResult WRITE setTopSnappingResult NOTIFY topSnappingResultChanged )
    Q_PROPERTY( QgsPoint currentCoordinate READ currentCoordinate WRITE setCurrentCoordinate NOTIFY currentCoordinateChanged )
    Q_PROPERTY( CloudUserInformation cloudUserInformation WRITE setCloudUserInformation );

  public:
    explicit DigitizingLogger();

    //! Returns the layer used as digitizing logs
    QgsProject *project() const { return mProject; };

    //! Sets the \a layer used as digitizing logs
    void setProject( QgsProject *project );

    /**
     * Returns position information generated by the TransformedPositionSource according to its provider
     */
    GnssPositionInformation positionInformation() const { return mPositionInformation; }

    /**
     * Sets position information generated by the TransformedPositionSource according to its provider
     * \param positionInformation the position information
     */
    void setPositionInformation( const GnssPositionInformation &positionInformation );

    /**
     * Returns whether the position is locked to the GNSS
     */
    bool positionLocked() const { return mPositionLocked; }

    /**
     * Sets whether the position is locked to the GNSS
     * \param positionLocked set to TRUE if the position is locked
     */
    void setPositionLocked( bool positionLocked );

    /**
     * Returns the top snapping result of the coordinate locator
     */
    SnappingResult topSnappingResult() const { return mTopSnappingResult; }

    /**
     * Sets the top snapping result of the coordinate locator
     * \param topSnappingResult the top snapping result object
     */
    void setTopSnappingResult( const SnappingResult &topSnappingResult );

    /**
     * Sets the current cloud user information
     * \param cloudUserInformation the cloud user information
     */
    void setCloudUserInformation( const CloudUserInformation &cloudUserInformation ) { mCloudUserInformation = cloudUserInformation; }

    /**
     * Returns the current coordinate
     */
    QgsPoint currentCoordinate() const { return mCurrentCoordinate; };

    /**
     * Sets the current coordinate
     * \param currentCoordinate the current coordinate point
     */
    void setCurrentCoordinate( const QgsPoint &currentCoordinate );

    /**
     * Writes the current coordinate into the logs layer.
     * \param action a string to describe the digitizing action attached to the current coordinate being logged
     */
    Q_INVOKABLE void writeCurrentCoordinate( const QString &action = QString() );

  signals:
  
    void projectChanged();
    void positionInformationChanged();
    void positionLockedChanged();
    void topSnappingResultChanged();
    void currentCoordinateChanged();

  private:

    //! Finds and link to the logs layer in present in the project
    void findLogsLayer();

    QgsProject *mProject = nullptr;
    QgsVectorLayer *mLayer = nullptr;

    GnssPositionInformation mPositionInformation;
    bool mPositionLocked = false;

    SnappingResult mTopSnappingResult;

    QgsPoint mCurrentCoordinate;

    CloudUserInformation mCloudUserInformation;
};

#endif // DIGITIZINGLOGGER_H
